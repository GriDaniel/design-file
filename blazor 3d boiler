@page "/operate"
@inject IJSRuntime JS

@using HomagGroup.Blazor3D.Viewers
@using HomagGroup.Blazor3D.Settings
@using HomagGroup.Blazor3D.Scenes
@using HomagGroup.Blazor3D.Lights
@using HomagGroup.Blazor3D.Maths
@using HomagGroup.Blazor3D.Materials
@using HomagGroup.Blazor3D.Objects
@using HomagGroup.Blazor3D.Geometires
@using HomagGroup.Blazor3D.Enums
@using HomagGroup.Blazor3D.Cameras
@using HomagGroup.Blazor3D.Helpers
@using HomagGroup.Blazor3D.Events
@implements IDisposable

<div class="h-100 w-100 row mx-auto justify-content-center">
    <div id="Info" class="h-25 justify-content-center">
        <h3 class="text-center fw-bolder m-5">Pipe 12345</h3>
    </div>

    <div class="h-50">
        <div class="row" style="height:500px;">
            <Viewer @ref="View3D1" Scene=scene />
        </div>
    </div>

    <div class="wrapper">
        <div class="row row-0">
            <div class="col col-00">
                <div class="progress-bar-container">
                    <div class="progress-bar"></div>
                </div>
                <div class="text-container">
                    <div class="time"></div>
                    <div class="date"></div>
                </div>
            </div>
            <div class="col col-01">
                <div class="life-estimator-text">
                    Consumable Life estimator
                </div>
                <div id="battery-container">
                    <div id="battery-level">
                    </div>
                </div>
            </div>
        </div>
        <div class="row row-1">
            <div class="col-10">
                <div class="d-flex">
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/eject.png" /></button>
                        <span class="cmd-btn-text">Eject/Abort</span>
                    </div>
                </div>
                <div class="d-flex">
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/backward-track.png" /></button>
                        <span class="cmd-btn-text">Skip Reverse</span>
                    </div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/backward.png" /></button>
                        <span class="cmd-btn-text">Seek Reverse</span>
                    </div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/pause.png" /></button>
                        <span class="cmd-btn-text">Play/Pause</span>
                    </div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/fast-forward.png" /></button>
                        <span class="cmd-btn-text">Seek Forward</span>
                    </div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/next.png" /></button>
                        <span class="cmd-btn-text">Skip Forward</span>
                    </div>
                </div>
            </div>
            <div class="col col-11">
                <div class="slider-container">
                    <div class="left-control">
                        <button class="arrow left">-</button>
                        <div class="label minus-five">-5%</div>
                    </div>
                    <div class="track-container">
                        <div class="track">
                            <div class="left-section"></div>
                            <div class="right-section"></div>
                        </div>
                        <div class="handle"></div>
                    </div>
                    <div class="right-control">
                        <button class="arrow right">+</button>
                        <div class="label plus-five">+5%</div>
                    </div>
                    <div class="label speed-override">Speed Override</div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Viewer View3D1 = null!;
    private Scene scene = new Scene();
    private Guid loadedObjectGuid = Guid.NewGuid();
    private string msg = string.Empty;

    // Navigation cube variables
    private Mesh navCube;
    private Object3D loadedModel;
    private Vector3 center;
    private float distance;
    private bool isDragging = false;
    private double lastX, lastY;

    public void Dispose()
    {
        View3D1.ObjectLoaded -= OnObjectLoaded;
        View3D1.JsModuleLoaded -= OnJsModuleLoaded;
        View3D1.OnMouseClick -= OnMouseClick;
        View3D1.OnMouseDown -= OnMouseDown;
        View3D1.OnMouseMove -= OnMouseMove;
        View3D1.OnMouseUp -= OnMouseUp;
    }

    protected override Task OnInitializedAsync()
    {
        AddLights();
        return base.OnInitializedAsync();
    }

    private void AddLights()
    {
        scene.Add(new AmbientLight());
        scene.Add(new PointLight()
        {
            Intensity = 0.5f,
            Position = new Vector3(100, 200, 100)
        });
        scene.Add(new PointLight()
        {
            Intensity = 1f,
            Position = new Vector3(5, 5, 5)
        });
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            View3D1.ObjectLoaded += OnObjectLoaded;
            View3D1.JsModuleLoaded += OnJsModuleLoaded;
            // Subscribe to mouse events (assuming Viewer supports these; otherwise, JS interop is needed)
            View3D1.OnMouseClick += OnMouseClick;
            View3D1.OnMouseDown += OnMouseDown;
            View3D1.OnMouseMove += OnMouseMove;
            View3D1.OnMouseUp += OnMouseUp;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnJsModuleLoaded()
    {
        await JS.InvokeVoidAsync("Slider.initSlider");
        await JS.InvokeVoidAsync("progressBar.initProgressBar");
        await JS.InvokeVoidAsync("batteryBar.initBatteryBar");
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Stl,
            FileURL = "/assets/test.stl",
        };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        View3D1.ViewerSettings.CanSelect = true;
        View3D1.Scene.Scale = new Vector3(1, 1, 1);
        View3D1.Scene.BackGroundColor = "White";
        View3D1.OrbitControls.EnablePan = true;
        View3D1.OrbitControls.EnableDamping = true;
        await View3D1.UpdateScene();

        await View3D1.SetCameraPositionAsync(new Vector3(0, 500, 0), new Vector3(0, -1, 0));

        // Create and add the navigation cube
        var cubeGeometry = new BoxGeometry(0.5f, 0.5f, 0.5f);
        var cubeMaterial = new MeshBasicMaterial { Color = new Color(0x888888), Transparent = true, Opacity = 0.5f };
        navCube = new Mesh { Geometry = cubeGeometry, Material = cubeMaterial };
        navCube.Position.Set(2, -2, -5); // Position in camera space (e.g., lower-right corner)
        View3D1.Camera.Add(navCube);
        await View3D1.UpdateScene();
    }

    private async Task OnObjectLoaded(Object3DArgs e)
    {
        foreach (var item in scene.Children)
        {
            if (item.Uuid == e.UUID)
            {
                loadedModel = item;
                this.msg = $"loaded object with id = {e.UUID} and type {item.Type}. Initial guid was {loadedObjectGuid}";
                // Calculate model center and viewing distance
                var bbox = new Box3().SetFromObject(loadedModel);
                center = bbox.GetCenter(new Vector3());
                var size = bbox.GetSize(new Vector3());
                distance = Math.Max(size.X, Math.Max(size.Y, size.Z)) * 2;
                StateHasChanged();
                break;
            }
        }
    }

    // Mouse event handlers for navigation cube
    private async Task OnMouseClick(MouseEventArgs e)
    {
        var intersected = await View3D1.RaycastAsync(e.X, e.Y);
        if (intersected != null && intersected.Object == navCube)
        {
            var normal = intersected.Face.Normal;
            SetCameraToView(normal);
        }
    }

    private async Task OnMouseDown(MouseEventArgs e)
    {
        var intersected = await View3D1.RaycastAsync(e.X, e.Y);
        if (intersected != null && intersected.Object == navCube)
        {
            isDragging = true;
            lastX = e.X;
            lastY = e.Y;
            View3D1.OrbitControls.Enabled = false; // Disable default controls during drag
        }
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        if (isDragging)
        {
            var deltaX = e.X - lastX;
            var deltaY = e.Y - lastY;

            var currentPos = View3D1.Camera.Position;
            var offset = currentPos - center;
            var radius = offset.Length();

            var theta = (float)Math.Atan2(offset.Y, offset.X);
            var phi = (float)Math.Acos(offset.Z / radius);

            theta += deltaX * 0.005f;
            phi += deltaY * 0.005f;
            phi = Math.Clamp(phi, 0.1f, MathF.PI - 0.1f); // Avoid poles

            offset.X = radius * (float)Math.Sin(phi) * (float)Math.Cos(theta);
            offset.Y = radius * (float)Math.Sin(phi) * (float)Math.Sin(theta);
            offset.Z = radius * (float)Math.Cos(phi);

            View3D1.Camera.Position = center + offset;
            View3D1.Camera.LookAt(center);

            lastX = e.X;
            lastY = e.Y;
            await View3D1.UpdateScene();
        }
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        if (isDragging)
        {
            isDragging = false;
            View3D1.OrbitControls.Enabled = true; // Re-enable default controls
        }
    }

    private async void SetCameraToView(Vector3 normal)
    {
        Vector3 newPosition = new Vector3();
        if (normal.Z > 0.9) // Front
            newPosition.Set(center.X, center.Y, center.Z + distance);
        else if (normal.Z < -0.9) // Back
            newPosition.Set(center.X, center.Y, center.Z - distance);
        else if (normal.X > 0.9) // Right
            newPosition.Set(center.X + distance, center.Y, center.Z);
        else if (normal.X < -0.9) // Left
            newPosition.Set(center.X - distance, center.Y, center.Z);
        else if (normal.Y > 0.9) // Top
            newPosition.Set(center.X, center.Y + distance, center.Z);
        else if (normal.Y < -0.9) // Bottom
            newPosition.Set(center.X, center.Y - distance, center.Z);

        View3D1.Camera.Position = newPosition;
        View3D1.Camera.LookAt(center);
        await View3D1.UpdateScene();
    }

    // Existing methods for loading other formats (unchanged)
    private async Task OnLoadObjButtonClick()
    {
        loadedObjectGuid = Guid.NewGuid();
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Obj,
            FileURL = "https://threejs.org/examples/models/obj/male02/male02.obj",
            TextureURL = "https://threejs.org/examples/textures/uv_grid_opengl.jpg",
            Uuid = loadedObjectGuid
        };
        await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 100, 250), new Vector3(0, 50, 0));
    }

    private async Task OnLoadObjNoTexturesButtonClick()
    {
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Obj,
            FileURL = "https://threejs.org/examples/models/obj/male02/male02.obj",
        };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 100, 250), new Vector3(0, 50, 0));
    }

    private async Task OnLoadColladaButtonClick()
    {
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Collada,
            FileURL = "https://threejs.org/examples/models/collada/elf/elf.dae",
        };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 5, 10), new Vector3(0, 3, 0));
    }

    private async Task OnLoadFbxButtonClick()
    {
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Fbx,
            FileURL = "https://threejs.org/examples/models/fbx/Samba%20Dancing.fbx",
        };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 100, 250), new Vector3(0, 50, 0));
    }

    private async Task OnLoadGltfButtonClick()
    {
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Gltf,
            FileURL = "https://threejs.org/examples/models/gltf/DamagedHelmet/glTF/DamagedHelmet.gltf",
        };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 1, 5), new Vector3(0, 0.5f, 0));
    }

    private async Task OnLoadStlButtonClick()
    {
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Stl,
            FileURL = "https://threejs.org/examples/models/stl/ascii/slotted_disk.stl",
        };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 3, 3), new Vector3(0, 1, 0));
    }

    private async Task OnClearAllClick()
    {
        await View3D1.ClearSceneAsync();
        AddLights();
        await View3D1.UpdateScene();
    }

    private async Task OnDeleteLast()
    {
        if (scene.Children.Count > 0)
        {
            var last = scene.Children.Last();
            await View3D1.RemoveByUuidAsync(last.Uuid);
        }
    }
}
