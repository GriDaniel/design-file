JS 
----


window.initViewCube = function(canvasId, dotNetRef) {
    // Assume Blazor3D exposes scene and camera globally (adjust based on actual exposure)
    const viewerCanvas = document.getElementById(canvasId);
    const blazor3D = window.Blazor3D || viewerCanvas.blazor3D; // Fallback; check Blazor3D docs
    if (!blazor3D || !blazor3D.scene || !blazor3D.camera) {
        console.error("Blazor3D scene or camera not accessible.");
        return;
    }

    const scene = blazor3D.scene;
    const camera = blazor3D.camera;

    // Create a simple view cube with colored faces
    const geometry = new THREE.BoxGeometry(1, 1, 1);
    const materials = [
        new THREE.MeshBasicMaterial({ color: 0xff0000 }), // Right (red)
        new THREE.MeshBasicMaterial({ color: 0x00ff00 }), // Left (green)
        new THREE.MeshBasicMaterial({ color: 0x0000ff }), // Top (blue)
        new THREE.MeshBasicMaterial({ color: 0xffff00 }), // Bottom (yellow)
        new THREE.MeshBasicMaterial({ color: 0xff00ff }), // Front (magenta)
        new THREE.MeshBasicMaterial({ color: 0x00ffff })  // Back (cyan)
    ];
    const viewCube = new THREE.Mesh(geometry, materials);

    // Attach to camera so it stays in view
    viewCube.position.set(5, -5, -10); // Bottom-right corner relative to camera
    viewCube.scale.set(0.5, 0.5, 0.5); // Small size
    camera.add(viewCube);
    scene.add(camera); // Ensure camera is in scene

    // Raycasting for click detection
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    viewerCanvas.addEventListener('click', (event) => {
        const rect = viewerCanvas.getBoundingClientRect();
        mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

        raycaster.setFromCamera(mouse, camera);
        const intersects = raycaster.intersectObject(viewCube);

        if (intersects.length > 0) {
            const normal = intersects[0].face.normal;
            let view = '';
            if (normal.z > 0.5) view = 'front';
            else if (normal.z < -0.5) view = 'back';
            else if (normal.x > 0.5) view = 'right';
            else if (normal.x < -0.5) view = 'left';
            else if (normal.y > 0.5) view = 'top';
            else if (normal.y < -0.5) view = 'bottom';

            if (view) {
                dotNetRef.invokeMethodAsync('UpdateCameraPosition', view);
            }
        }
    });

    // Optional: Remove XYZ indicator if not disabled via settings
    // const axesHelper = scene.getObjectByName('AxesHelper'); // Adjust name if known
    // if (axesHelper) scene.remove(axesHelper);
};









@ CODE ---


@page "/operate"
@inject IJSRuntime JS

@using HomagGroup.Blazor3D.Viewers
@using HomagGroup.Blazor3D.Settings
@using HomagGroup.Blazor3D.Scenes
@using HomagGroup.Blazor3D.Lights
@using HomagGroup.Blazor3D.Maths
@using HomagGroup.Blazor3D.Objects
@using HomagGroup.Blazor3D.Geometries
@using HomagGroup.Blazor3D.Enums
@using HomagGroup.Blazor3D.Cameras
@using HomagGroup.Blazor3D.Helpers
@using HomagGroup.Blazor3D.Events
@implements IDisposable

<div class="h-100 w-100 row mx-auto justify-content-center">
    <div id="Info" class="h-25 justify-content-center">
        <h3 class="text-center fw-bolder m-5">Pipe 12345</h3>
    </div>
    <div class="h-50">
        <div class="row" style="height:500px;">
            <Viewer @ref="View3D1" Scene="scene" />
        </div>
    </div>
    <!-- Existing UI elements (progress bar, buttons, slider) remain unchanged -->
    <div class="wrapper">
        <div class="row row-0">
            <div class="col col-00">
                <div class="progress-bar-container">
                    <div class="progress-bar"></div>
                </div>
                <div class="text-container">
                    <div class="time"></div>
                    <div class="date"></div>
                </div>
            </div>
            <div class="col col-01">
                <div class="life-estimator-text">Consumable Life estimator</div>
                <div id="battery-container">
                    <div id="battery-level"></div>
                </div>
            </div>
        </div>
        <div class="row row-1">
            <div class="col-10">
                <div class="d-flex">
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/eject.png" /></button>
                        <span class="cmd-btn-text">Eject/Abort</span>
                    </div>
                </div>
                <div class="d-flex">
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/backward-track.png" /></button>
                        <span class="cmd-btn-text">Skip Reverse</span>
                    </div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/backward.png" /></button>
                        <span class="cmd-btn-text">Seek Reverse</span>
                    </div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/pause.png" /></button>
                        <span class="cmd-btn-text">Play/Pause</span>
                    </div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/fast-forward.png" /></button>
                        <span class="cmd-btn-text">Seek Forward</span>
                    </div>
                    <div class="d-flex flex-column align-items-center gap-2">
                        <button class="cmd-btn btn btn-secondary col rounded"><img class="img-fluid" src="/assets/next.png" /></button>
                        <span class="cmd-btn-text">Skip Forward</span>
                    </div>
                </div>
            </div>
            <div class="col col-11">
                <div class="slider-container">
                    <div class="left-control">
                        <button class="arrow left">-</button>
                        <div class="label minus-five">-5%</div>
                    </div>
                    <div class="track-container">
                        <div class="track">
                            <div class="left-section"></div>
                            <div class="right-section"></div>
                        </div>
                        <div class="handle"></div>
                    </div>
                    <div class="right-control">
                        <button class="arrow right">+</button>
                        <div class="label plus-five">+5%</div>
                    </div>
                    <div class="label speed-override">Speed Override</div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Viewer View3D1 = null!;
    private Scene scene = new Scene();
    private Guid loadedObjectGuid = Guid.NewGuid();
    private string msg = string.Empty;
    private Mesh loadedModel; // Store the loaded STL model
    private Vector3 center; // Center of the model for camera targeting
    private float distance; // Distance for camera positioning

    public void Dispose()
    {
        View3D1.ObjectLoaded -= OnObjectLoaded;
        View3D1.JsModuleLoaded -= OnJsModuleLoaded;
    }

    protected override Task OnInitializedAsync()
    {
        AddLights();
        return base.OnInitializedAsync();
    }

    private void AddLights()
    {
        // Ambient light provides base illumination
        scene.Add(new AmbientLight());
        // Point lights add directional lighting for better model visibility
        scene.Add(new PointLight { Intensity = 0.5f, Position = new Vector3(100, 200, 100) });
        scene.Add(new PointLight { Intensity = 1f, Position = new Vector3(5, 5, 5) });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to events only once when the component first renders
            View3D1.ObjectLoaded += OnObjectLoaded;
            View3D1.JsModuleLoaded += OnJsModuleLoaded;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnJsModuleLoaded()
    {
        // Initialize UI elements via JavaScript interop
        await JS.InvokeVoidAsync("Slider.initSlider");
        await JS.InvokeVoidAsync("progressBar.initProgressBar");
        await JS.InvokeVoidAsync("batteryBar.initBatteryBar");

        // Load the STL model
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Stl,
            FileURL = "/assets/test.stl"
        };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);

        // Configure viewer settings
        View3D1.ViewerSettings.CanSelect = true; // Allows selection (not used here but kept)
        View3D1.Scene.BackGroundColor = "White"; // White background
        View3D1.OrbitControls.EnablePan = true; // Enable panning
        View3D1.OrbitControls.EnableDamping = true; // Smooth camera movement
        View3D1.OrbitControls.EnableZoom = true; // Explicitly enable zooming
        // Attempt to disable XYZ indicator (assuming a setting exists; adjust if needed)
        // View3D1.ViewerSettings.ShowAxesHelper = false; // Uncomment if available

        // Set initial camera position
        await View3D1.SetCameraPositionAsync(new Vector3(0, 500, 0), new Vector3(0, -1, 0));
        await View3D1.UpdateScene();

        // Initialize the view cube after the scene is ready
        await JS.InvokeVoidAsync("initViewCube", "viewer-canvas", DotNetObjectReference.Create(this));
    }

    private Task OnObjectLoaded(Object3DArgs e)
    {
        // Find the loaded object in the scene
        foreach (var item in scene.Children)
        {
            if (item.Uuid == e.UUID)
            {
                loadedModel = item as Mesh;
                if (loadedModel != null)
                {
                    // Calculate the bounding box to center the camera later
                    var bbox = new Box3().SetFromObject(loadedModel);
                    center = bbox.GetCenter(new Vector3());
                    var size = bbox.GetSize(new Vector3());
                    distance = Math.Max(size.X, Math.Max(size.Y, size.Z)) * 2; // Distance is 2x the largest dimension
                }
                msg = $"Loaded object with id = {e.UUID} and type {item.Type}";
                StateHasChanged();
                break;
            }
        }
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task UpdateCameraPosition(string view)
    {
        // Update camera position based on the selected view
        Vector3 newPosition = new Vector3();
        switch (view)
        {
            case "front":
                newPosition.Set(center.X, center.Y, center.Z + distance);
                break;
            case "back":
                newPosition.Set(center.X, center.Y, center.Z - distance);
                break;
            case "left":
                newPosition.Set(center.X - distance, center.Y, center.Z);
                break;
            case "right":
                newPosition.Set(center.X + distance, center.Y, center.Z);
                break;
            case "top":
                newPosition.Set(center.X, center.Y + distance, center.Z);
                break;
            case "bottom":
                newPosition.Set(center.X, center.Y - distance, center.Z);
                break;
        }
        View3D1.Camera.Position = newPosition;
        View3D1.Camera.LookAt(center); // Point camera at the model’s center
        await View3D1.UpdateScene(); // Apply changes
    }
}
